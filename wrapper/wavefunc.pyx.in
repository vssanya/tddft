import numpy as np
cimport numpy as np

import tdse.utils
if tdse.utils.is_jupyter_notebook():
    import matplotlib.pyplot as plt
    from IPython.core.pylabtools import print_figure

from mpi4py.libmpi cimport MPI_COMM_NULL, MPI_Gather, MPI_C_DOUBLE_COMPLEX
from mpi4py.MPI import COMM_NULL

from types cimport complex_t
from abs_pot cimport mask_core
from grid cimport ShGrid, SpGrid, SpGrid2d, ShNeGrid, ShNeGrid3D
from sphere_harmonics cimport YlmCache

from masks cimport ShCoreMask, ShNeCoreMask, SpCoreMask

from libc.stdlib cimport malloc, free


cdef class CtWavefunc:
    def __cinit__(self, SpGrid2d grid):
        self.grid = grid
        self.cdata = new cCtWavefunc(<cGrid2d*> grid.data)

    def __init__(self, SpGrid2d grid):
        pass

    def asarray(self):
        cdef complex_t[:, ::1] array = <complex_t[:self.cdata.grid.n[1],:self.cdata.grid.n[0]]>(<complex_t*>self.cdata.data)
        return np.asarray(array)

    def norm(self):
        return self.cdata.norm()


{{for Prefix, Grid in [("Sh", "ShGrid"), ("ShNe", "ShNeGrid"), ("Sp", "SpGrid2d")]}}
cdef class {{Prefix}}Wavefunc:
    def __cinit__(self, {{Grid}} grid, int m=0, dealloc=True):
        self.grid = grid

        if not dealloc:
            self.cdata = NULL
        else:
            self.cdata = new c{{Prefix}}Wavefunc(grid.data[0], m)

        self.dealloc = dealloc

    def __init__(self, {{Grid}} grid, int m=0, dealloc=True):
        pass

    @property
    def m(self):
        return self.cdata.m

    def init_p(self, double p, int l_max=-1):
        self.cdata.init_p(p, l_max)

    def copy(self):
        cdef {{Prefix}}Wavefunc wf_copy = {{Prefix}}Wavefunc(self.grid, m=self.cdata.m)
        self.cdata.copy(wf_copy.cdata)
        return wf_copy

    cdef _set_data(self, c{{Prefix}}Wavefunc* data):
        self.cdata = data

    def __dealloc__(self):
        if self.dealloc and self.cdata != NULL:
            del self.cdata
            self.cdata = NULL

    def n_sp(self, SpGrid grid, YlmCache ylm_cache, np.ndarray[np.double_t, ndim=2] n = None) -> np.ndarray:
        if n is None:
            n = np.ndarray((grid.data.n[1], grid.data.n[0]), np.double)

        self.cdata.n_sp(grid.data[0], &n[0,0], ylm_cache.cdata)

        return n

    def norm(self, {{Prefix}}CoreMask mask = None):
        if mask is None:
            return self.cdata.norm()
        else:
            return self.cdata.norm(<sh_f> mask.cdata[0])

    def norm_z(self):
        cdef np.ndarray[np.double_t, ndim=1] res = np.zeros(2*self.grid.Nr)
        self.cdata.norm_z(&res[0])
        return res

    def norm_l(self):
        arr = self.asarray()
        return np.sum(np.abs(arr)**2, axis=1)*self.grid.data.d[0]

    def normalize(self):
        self.cdata.normalize()

    def z(self, {{Prefix}}CoreMask mask=None):
        if mask is None:
            return self.cdata.z()
        else:
            return self.cdata.z(<sh_f> mask.cdata[0])

    def z2(self, {{Prefix}}CoreMask mask=None):
        if mask is None:
            return self.cdata.z2()
        else:
            return self.cdata.z2(<sh_f> mask.cdata[0])

    def pz(self):
        cdef cdouble res = self.cdata.pz()
        return (<complex_t*>(&res))[0]

    def __mul__({{Prefix}}Wavefunc self, {{Prefix}}Wavefunc other):
        cdef cdouble res = self.cdata[0]*other.cdata[0]
        return (<complex_t*>(&res))[0]

    def exclude({{Prefix}}Wavefunc self, {{Prefix}}Wavefunc other):
        self.cdata.exclude(other.cdata[0])

    def asarray(self):
        cdef complex_t[:, ::1] array = <complex_t[:self.cdata.grid.n[1],:self.cdata.grid.n[0]]>(<complex_t*>self.cdata.data)
        return np.asarray(array)

    def get_sp(self, SpGrid grid, YlmCache ylm_cache, int ir, int ic, int ip):
        cdef cdouble res =  self.cdata.get_sp(grid.data[0], [ir, ic, ip], ylm_cache.cdata)
        return (<complex_t*>(&res))[0]

    def _figure_data(self, format):
        fig, ax = plt.subplots()
        fig.set_size_inches((6,3))

        ax.plot(self.grid.r, np.sum(np.abs(self.asarray())**2,axis=0))

        ax.set_xlabel('r, (a.u.)')
        ax.set_ylabel(r'$\left|\psi\right|^2$, (a.u.)')

        ax.set_yscale('log')

        data = print_figure(fig, format)
        plt.close(fig)
        return data

    def _repr_png_(self):
        return self._figure_data('png')

    @staticmethod
    def random({{Grid}} grid, int l=0, int m=0):
        wf = {{Prefix}}Wavefunc(grid, m)
        arr = wf.asarray()
        print(arr.shape)
        arr[:] = 0.0
        arr[l,:] = np.random.rand(arr.shape[1])
        wf.normalize()
        return wf

    @staticmethod
    def ort_l(wfs, int l):
        cdef c{{Prefix}}Wavefunc** wf_arr = <c{{Prefix}}Wavefunc**>malloc(sizeof(c{{Prefix}}Wavefunc*)*len(wfs))
        for i in range(len(wfs)):
            wf_arr[i] = (<{{Prefix}}Wavefunc>wfs[i]).cdata

        c{{Prefix}}Wavefunc.ort_l(l, len(wfs), wf_arr)
        free(wf_arr)

cdef {{Prefix}}Wavefunc {{Prefix.lower()}}_wavefunc_from_point(c{{Prefix}}Wavefunc* data, {{Grid}} grid, bint dealloc):
    wf = {{Prefix}}Wavefunc(grid=grid, dealloc=dealloc)
    wf._set_data(data)
    return wf
{{endfor}}

def convert_sp_to_sh(SpWavefunc src, ShWavefunc dest, YlmCache ylm_cache, m):
    sp_to_sh(src.cdata, dest.cdata, ylm_cache.cdata, m)

def convert_sh_to_sp(ShWavefunc src, SpWavefunc dest, YlmCache ylm_cache, m):
    sh_to_sp(src.cdata, dest.cdata, ylm_cache.cdata, m)

cdef class ShNeWavefunc3D:
    def __cinit__(self, ShNeGrid3D grid, dealloc=True):
        self.grid = grid

        if not dealloc:
            self.cdata = NULL
        else:
            self.cdata = new cShNeWavefunc3D(grid.data[0])

        self.dealloc = dealloc

    def __init__(self, ShNeGrid3D grid, dealloc=True):
        pass

    cdef _set_data(self, cShNeWavefunc3D* data):
        self.cdata = data

    def __dealloc__(self):
        if self.dealloc and self.cdata != NULL:
            del self.cdata
            self.cdata = NULL

    def norm(self, ShNeCoreMask mask = None):
        if mask is None:
            return self.cdata.norm()
        else:
            return self.cdata.norm(<sh_f> mask.cdata[0])

    def normalize(self):
        self.cdata.normalize()

    def __mul__(ShNeWavefunc3D self, ShNeWavefunc3D other):
        cdef cdouble res = self.cdata[0]*other.cdata[0]
        return (<complex_t*>(&res))[0]

    def exclude(ShNeWavefunc3D self, ShNeWavefunc3D other):
        self.cdata.exclude(other.cdata[0])

    def asarray(self):
        cdef complex_t[:, ::1] array = <complex_t[:self.cdata.grid.n[1]**2,:self.cdata.grid.n[0]]>(<complex_t*>self.cdata.data)
        return np.asarray(array)


cdef ShNeWavefunc3D shne_wavefunc3d_from_point(cShNeWavefunc3D* data, ShNeGrid3D grid, bint dealloc):
    wf = ShNeWavefunc3D(grid=grid, dealloc=dealloc)
    wf._set_data(data)
    return wf

{{for Prefix in ["Sh", "ShNe"]}}
cdef class {{Prefix}}WavefuncArray:
    def __cinit__(self, int N, np.ndarray[int, ndim=1] m, {{Prefix}}Grid grid, Comm comm = None, np.ndarray[int, ndim=1] rank = None):
        cdef int* rankPtr = NULL

        if comm is None:
            comm = COMM_NULL

        if rank is not None:
            rankPtr = <int*> rank.data

        self.cdata = new WavefuncArray[c{{Prefix}}Grid](N, grid.data[0], <int*>m.data, comm.ob_mpi, rankPtr)

        self.mpi_comm = comm
        self.grid = grid

    def __init__(self, int N, {{Prefix}}Grid grid, Comm comm = None, np.ndarray[int, ndim=1] orbsRank = None):
        pass

    def __dealloc__(self):
        if self.cdata != NULL:
            del self.cdata

    def is_root_or_not_mpi(self):
        return not self.is_mpi() or self.cdata.mpi_rank == 0

    def set(self, int index, {{Prefix}}Wavefunc wf):
        self.cdata.set(index, wf.cdata)

    def set_all(self, {{Prefix}}Wavefunc wf):
        self.cdata.set_all(wf.cdata)

    @property
    def shape(self):
        return (self.cdata.N, self.cdata.grid.n[1], self.cdata.grid.n[0])

    def save(self, filename):
        data = self.asarray()

        if self.is_mpi():
            if self.mpi_rank == 0:
                data_save = np.zeros(self.shape, np.complex)
            else:
                data_save = None

            self.mpi_comm.Gather(data, data_save, root=0)
        else:
            data_save = data

        if self.is_root_or_not_mpi():
            np.save(filename, data_save)

    def z(self, {{Prefix}}CoreMask mask = None, np.ndarray[double, ndim=1] z = None):
        cdef double* res_ptr = NULL
        if self.is_root():
            if z is None:
                z = np.ndarray(self.cdata.N, dtype=np.double)
            res_ptr = <double*>z.data

        if mask is None:
            self.cdata.z(res_ptr)
        else:
            self.cdata.z(res_ptr, <sh_f> mask.cdata[0])

        return z

    def z2(self, {{Prefix}}CoreMask mask = None, np.ndarray[double, ndim=1] z2 = None):
        cdef double* res_ptr = NULL
        if self.is_root():
            if z2 is None:
                z2 = np.ndarray(self.cdata.N, dtype=np.double)
            res_ptr = <double*>z2.data

        if mask is None:
            self.cdata.z2(res_ptr)
        else:
            self.cdata.z2(res_ptr, <sh_f> mask.cdata[0])

        return z2

    def norm(self, np.ndarray[double, ndim=1, mode='c'] norm = None, {{Prefix}}CoreMask mask = None):
        cdef double* res_ptr = NULL
        if self.is_root():
            if norm is None:
                norm = np.ndarray(self.cdata.N, dtype=np.double)
            res_ptr = <double*>norm.data

        if mask is not None:
            self.cdata.norm(res_ptr, <sh_f> mask.cdata[0])
        else:
            self.cdata.norm(res_ptr)

        return norm

    def normalize(self, np.ndarray[np.uint8_t, ndim=1] active_orbs = None, np.ndarray[double, ndim=1] norm = None):
        cdef bool_t* active_orbs_ptr = NULL
        cdef double* norm_ptr = NULL

        if active_orbs is not None:
            active_orbs_ptr = <bool_t*>active_orbs.data

        if norm is not None:
            norm_ptr = <double*>norm.data

        self.cdata.normalize(active_orbs_ptr, norm_ptr)

    def asarray(self):
        cdef complex_t[:, :, ::1] res
        if self.is_mpi():
            array = <complex_t[:1, :self.cdata.grid.n[1],:self.cdata.grid.n[0]]>(<complex_t*>self.cdata.data)
        else:
            array = <complex_t[:self.cdata.N, :self.cdata.grid.n[1],:self.cdata.grid.n[0]]>(<complex_t*>self.cdata.data)

        return np.asarray(array)

    def is_mpi(self) -> bool:
        return self.cdata.mpi_comm != MPI_COMM_NULL

    def is_root(self) -> bool:
        return not self.is_mpi() or self.cdata.mpi_rank == 0

    def save(self, filename):
        cdef np.ndarray[np.complex_t, ndim=3, mode='c'] arr = None
        cdef cdouble* arr_ptr = NULL
        cdef int size = self.cdata.grid.n[0]*self.cdata.grid.n[1]

        if self.is_mpi():
            if self.cdata.mpi_rank == 0:
                arr = np.ndarray((self.cdata.N, self.cdata.grid.n[1], self.cdata.grid.n[0]), dtype=np.complex)
                arr_ptr = <cdouble*>arr.data
            MPI_Gather(self.cdata.data, size, MPI_C_DOUBLE_COMPLEX, arr_ptr, size, MPI_C_DOUBLE_COMPLEX, 0, self.cdata.mpi_comm)
            if self.cdata.mpi_rank == 0:
                np.save(filename, self.asarray())
        else:
            np.save(filename, self.asarray())
{{endfor}}
