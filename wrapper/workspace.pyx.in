import numpy as np
cimport numpy as np

from atom cimport ShAtomCache, ShNeAtomCache
from grid cimport ShGrid, SpGrid, ShNeGrid, Range
from wavefunc cimport ShWavefunc, CtWavefunc, ShNeWavefunc, ShWavefuncArray, ShNeWavefuncArray
from field cimport Field
from orbitals cimport ShOrbitals, ShNeOrbitals
from sphere_harmonics cimport YlmCache
from hartree_potential import UxcType


cdef class Eigen:
    def __cinit__(self, ShGrid grid):
        self.cdata = eigen_ws_alloc(grid.data)

    def __dealloc__(self):
        if self.cdata != NULL:
            eigen_ws_free(self.cdata)

    def calc(self, ShAtomCache atom):
        eigen_calc_for_atom(self.cdata, atom.cdata)

    def get_eval(self):
        cdef double[:, ::1] array = <double[:self.cdata.grid.n[1],:self.cdata.grid.n[0]]>self.cdata.eval
        return np.asarray(array)

    def get_evec(self):
        cdef double[:, :, ::1] array = <double[:self.cdata.grid.n[1], :self.cdata.grid.n[0], :self.cdata.grid.n[0]]>self.cdata.evec
        return np.asarray(array)

    def get_n_with_energy(self, energy):
        return eigen_get_n_with_energy(self.cdata, energy)

    def save(self, file):
        data = np.ndarray((self.cdata.grid.n[1], self.cdata.grid.n[0]+1, self.cdata.grid.n[0]))
        data[:,:-1,:] = self.get_evec()
        data[:,-1,:] = self.get_eval()
        np.save(file, data)

    def load(self, file):
        data = np.load(file)
        self.get_evec()[:] = data[:,:-1,:]
        self.get_eval()[:] = data[:,-1,:]

cdef class CartWorkspace:
    def __cinit__(self, CartWavefunc3D wf, Atom atom):
        self.cdata = new CartWavefuncWS(wf.cdata, atom.cdata[0], NULL)

    def __dealloc__(self):
        del self.cdata

    def prop(self, CartWavefunc3D wf, Field field, double t, double dt):
        #self.cdata.prop(wf.cdata[0], field.cdata, t, dt)
        self.cdata.prop(field.cdata, t, dt)

    def prop_abs(self, CartWavefunc3D wf, double dt):
        #self.cdata.prop_abs(wf.cdata[0], dt)
        self.cdata.prop_abs(dt)

    def prop_img(self, CartWavefunc3D wf, double dt):
        #self.cdata.prop_img(wf.cdata[0], dt)
        self.cdata.prop_img(dt)

cdef class GPSWorkspace:
    def __cinit__(self, ShGrid grid, Atom atom, double dt, double Emax):
        self.cdata = ws_gps_alloc(grid.data, atom.cdata, dt, Emax)

    def __dealloc__(self):
        ws_gps_free(self.cdata)

    def calc_s(self, Eigen eigen):
        ws_gps_calc_s(self.cdata, eigen.cdata)

    def prop(self, ShWavefunc wf):
        ws_gps_prop(self.cdata, wf.cdata)

    def prop_comm(self, ShWavefunc wf, UabsCache uabs, Field field, double t):
        ws_gps_prop_common(self.cdata, wf.cdata, uabs.cdata, field.cdata, t)


cdef class SFAWorkspace:
    def __cinit__(self):
        self.cdata = new momentum_space()

    def __dealloc__(self):
        del self.cdata

    def prop(self, CtWavefunc wf, Field field, double t, double dt):
        self.cdata.propagate(wf.cdata[0], field.cdata, t, dt)

{{for prefix, prefix2 in [("Sh", ""), ("ShNe", "Ne")]}}
cdef class {{prefix}}WavefuncWS:
    def __cinit__(self, {{prefix}}AtomCache atom_cache, {{prefix}}Grid grid, Uabs{{prefix2}}Cache uabs, int num_threads = -1, int propType=4, int gauge = 0):
        cdef PropAtType propAtType
        if propType == 4:
            propAtType = Odr4
        else:
            propAtType = Odr3

        cdef Gauge c_gauge
        if gauge == 0:
            c_gauge = LENGTH
        else:
            c_gauge = VELOCITY

        self.cdata = new WavefuncWS[c{{prefix}}Grid](grid.data[0], atom_cache.cdata, uabs.cdata[0], propAtType, c_gauge, num_threads)

        self.uabs = uabs
        self.atom_cache = atom_cache

    def __dealloc__(self):
        del self.cdata

    def __init__(self, {{prefix}}AtomCache atom_cache, {{prefix}}Grid grid, Uabs{{prefix2}}Cache uabs, int num_threads = -1, int propType=4, int gauge = 0):
        pass

    def set_atom_cache(self, {{prefix}}AtomCache atom_cache):
        self.cdata.set_atom_cache(atom_cache.cdata)
        self.atom_cache = atom_cache

    def prop(self, {{prefix}}Wavefunc wf, Field field, double t, double dt):
        self.cdata.prop(wf.cdata[0], field.cdata, t, dt)

    def prop_abs(self, {{prefix}}Wavefunc wf, double dt):
        self.cdata.prop_abs(wf.cdata[0], dt)

    def prop_without_field(self, {{prefix}}Wavefunc wf, double dt):
        self.cdata.prop_without_field(wf.cdata[0], dt)

    def prop_img(self, {{prefix}}Wavefunc wf, double dt):
        self.cdata.prop_img(wf.cdata[0], dt)
{{endfor}}

SKnWorkspace = ShWavefuncWS
SNeKnWorkspace = ShWavefuncWS


cdef class WfWithPolarizationWorkspace:
    def __cinit__(self, ShAtomCache atom_cache, ShGrid grid, UabsCache uabs, double[:] Upol_1, double[:] Upol_2 = None, int num_threads = -1, int gauge = 0):
        cdef Gauge c_gauge
        if gauge == 0:
            c_gauge = LENGTH
        else:
            c_gauge = VELOCITY

        if Upol_2 is None:
            self.cdata = new WfWithPolarization(grid.data[0], atom_cache.cdata, uabs.cdata[0], &Upol_1[0], NULL, Odr4, c_gauge, num_threads)
        else:
            self.cdata = new WfWithPolarization(grid.data[0], atom_cache.cdata, uabs.cdata[0], &Upol_1[0], &Upol_2[0], Odr4, c_gauge, num_threads)

        self.uabs = uabs
        self.atom_cache = atom_cache

    def __dealloc__(self):
        del self.cdata

    def __init__(self, ShAtomCache atom_cache, ShGrid grid, UabsCache uabs, double[:] Upol_1, double[:] Upol_2 = None, int num_threads = -1, int gauge = 0):
        self.Upol_1 = Upol_1
        self.Upol_2 = Upol_2

    def prop(self, ShWavefunc wf, Field field, double t, double dt):
        self.cdata.prop(wf.cdata[0], field.cdata, t, dt)

    def prop_without_field(self, ShWavefunc wf, double dt):
        self.cdata.prop_without_field(wf.cdata[0], dt)

    def prop_img(self, ShWavefunc wf, double dt):
        self.cdata.prop_img(wf.cdata[0], dt)

cdef class SKnWithSourceWorkspace:
    def __cinit__(self, ShAtomCache atom_cache, ShGrid grid, UabsCache uabs, ShWavefunc source, double E, int gauge = 0, int num_threads = -1):
        cdef Gauge c_gauge
        if gauge == 0:
            c_gauge = LENGTH
        else:
            c_gauge = VELOCITY

        self.cdata = new WfEWithSource(grid.data[0], atom_cache.cdata, uabs.cdata[0], source.cdata[0], E, Odr4, c_gauge, num_threads)
        self.uabs = uabs
        self.source = source
        self.atom_cache = atom_cache

    def __dealloc__(self):
        del self.cdata

    def __init__(self, ShAtomCache atom_cache, ShGrid grid, UabsCache uabs, ShWavefunc source, int gauge = 0, int num_threads = -1):
        pass

    def prop(self, ShWavefunc wf, Field field, double t, double dt):
        self.cdata.prop(wf.cdata[0], field.cdata, t, dt)

    @property
    def abs_norm(self):
        return self.cdata.abs_norm


{{for prefix, prefix2 in [("Sh", ""), ("ShNe", "Ne")]}}
cdef class {{prefix}}OrbitalsWS:
    def __cinit__(self, {{prefix}}AtomCache atom_cache, {{prefix}}Grid sh_grid, SpGrid sp_grid, Uabs{{prefix2}}Cache uabs, YlmCache ylm_cache, int Uxc_lmax = 3, int Uh_lmax = 3, uxc = UxcType.LB, int propType=4, int gauge=0, int num_threads=-1):
        assert(Uxc_lmax >= 0 and Uxc_lmax <= 3)
        assert(Uh_lmax >= 0 and Uh_lmax <= 3)

        cdef PropAtType propAtType
        if propType == 4:
            propAtType = Odr4
        else:
            propAtType = Odr3

        cdef Gauge c_gauge
        if gauge == 0:
            c_gauge = LENGTH
        else:
            c_gauge = VELOCITY

        self.cdata = new OrbitalsWS[c{{prefix}}Grid](sh_grid.data[0], sp_grid.data[0],
                              atom_cache.cdata, uabs.cdata[0],
                              ylm_cache.cdata[0], Uh_lmax, Uxc_lmax,
                              <XCPotentialEnum>(<int>uxc.value), propAtType, c_gauge, num_threads)
        self.uabs = uabs
        self.atom_cache = atom_cache

    def __dealloc__(self):
        del self.cdata

    def __init__(self, {{prefix}}AtomCache atom_cache, {{prefix}}Grid sh_grid, SpGrid sp_grid, Uabs{{prefix2}}Cache uabs, YlmCache ylm_cache, int Uxc_lmax = 3, int Uh_lmax = 3, uxc = UxcType.LB, int gauge = 0, int num_threads=-1):
        pass

    def set_time_approx_uee_two_point(self, {{prefix}}Orbitals orbs):
        self.cdata.setTimeApproxUeeTwoPointFor(orbs.cdata[0])

    def prop_img(self, {{prefix}}Orbitals orbs, double dt, np.ndarray[np.uint8_t, ndim=1] active_orbs=None, np.ndarray[np.int_t, ndim=1] dt_count = None, bint calc_uee=True):
        cdef bool_t* active_orbs_ptr = NULL
        if active_orbs is not None:
            active_orbs_ptr = <bool_t*>active_orbs.data

        cdef int* dt_count_ptr = NULL
        if dt_count is not None:
            dt_count_ptr = <int*>dt_count.data

        self.cdata.prop_img(orbs.cdata[0], dt, active_orbs_ptr, dt_count_ptr, calc_uee)

    def prop_ha(self, {{prefix}}Orbitals orbs, double dt, bint calc_uee=True, np.ndarray[np.uint8_t, ndim=1] active_orbs=None):
        cdef bool_t* active_orbs_ptr = NULL
        if active_orbs is not None:
            active_orbs_ptr = <bool_t*>active_orbs.data

        self.cdata.prop_ha(orbs.cdata[0], dt, calc_uee, active_orbs_ptr)

    def prop_abs(self, {{prefix}}Orbitals orbs, double dt, np.ndarray[np.uint8_t, ndim=1] active_orbs=None):
        cdef bool_t* active_orbs_ptr = NULL
        if active_orbs is not None:
            active_orbs_ptr = <bool_t*>active_orbs.data

        self.cdata.prop_abs(orbs.cdata[0], dt, active_orbs_ptr)

    def prop(self, {{prefix}}Orbitals orbs, Field field, double t, double dt, bint calc_uee=True, np.ndarray[np.uint8_t, ndim=1] active_orbs=None, np.ndarray[np.int_t, ndim=1] dt_count = None):
        cdef bool_t* active_orbs_ptr = NULL
        if active_orbs is not None:
            active_orbs_ptr = <bool_t*>active_orbs.data

        cdef int* dt_count_ptr = NULL
        if dt_count is not None:
            dt_count_ptr = <int*>dt_count.data

        self.cdata.prop(orbs.cdata[0], field.cdata, t, dt, calc_uee, active_orbs_ptr, dt_count_ptr)

    def calc_uee(self, {{prefix}}Orbitals orbs, Uxc_lmax=None, Uh_lmax=None, Range rRange = None):
        cdef optional[cRange] c_range
        if rRange is not None:
            c_range = optional[cRange](rRange.cdata)

        if Uxc_lmax is None:
            Uxc_lmax = self.cdata.Uxc_lmax

        if Uh_lmax is None:
            Uh_lmax = self.cdata.Uh_lmax

        self.cdata.calc_Uee(orbs.cdata[0], Uxc_lmax, Uh_lmax, NULL, c_range)

    @property
    def uee(self):
        cdef double[:,::1] res = <double[:3,:self.cdata.sh_grid.n[0]]>self.cdata.Uee[0].data
        return np.asarray(res)

    @property
    def n_sp(self):
        cdef double[:,::1] res = <double[:self.cdata.sp_grid.n[1],:self.cdata.sp_grid.n[0]]>self.cdata.n_sp
        return np.asarray(res)
{{endfor}}

{{for prefix, prefix2 in [("Sh", ""), ("ShNe", "Ne")]}}
cdef class {{prefix}}WfArrayWS:
    def __cinit__(self, {{prefix}}AtomCache atom_cache, {{prefix}}Grid grid, Uabs{{prefix2}}Cache uabs, int N, int num_threads = -1, int propType=4, int gauge = 0):
        cdef PropAtType propAtType
        if propType == 4:
            propAtType = Odr4
        else:
            propAtType = Odr3

        cdef Gauge c_gauge
        if gauge == 0:
            c_gauge = LENGTH
        else:
            c_gauge = VELOCITY

        self.cdata = new WfArray[c{{prefix}}Grid](grid.data[0], atom_cache.cdata, uabs.cdata[0], propAtType, c_gauge, num_threads)

        self.uabs = uabs
        self.atom_cache = atom_cache

    def __dealloc__(self):
        del self.cdata

    def __init__(self, {{prefix}}AtomCache atom_cache, {{prefix}}Grid grid, Uabs{{prefix2}}Cache uabs, int num_threads = -1, int propType=4, int gauge = 0):
        pass

    def prop(self, {{prefix}}WavefuncArray arr, double[:] E, double dt):
        cdef double* Eptr = NULL
        if E is not None:
            Eptr = &E[0]

        self.cdata.prop(arr.cdata, Eptr, dt)
{{endfor}}
